/**
 * .contaier block
 */
.container {
  margin-left: auto;
  margin-right: auto;
  width: 100%; // necessary when used with position sticky, fixed, or absolute
  padding-left:  var(--spacer);
  padding-right: var(--spacer);

  /**
   * .max-width-* MODIFIER
   * * can be any screen resolution class name segment
   */
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);
    &.max-width-#{$label} { max-width: $width; }
    &.max-width-#{$label}-relative { max-width: calc(#{strip($width) / 8} * var(--unit)); }
  }

  // not documented. not used. unfinished.
  &.fill { min-height: 100%; }
  &.fill-viewport { min-height: 100vh; }
}




/**
 * .no-margins modifier for .container and .container.flex
 */
.container.no-margins,
.container .columns.no-margins,
.container .grid.no-margins,
.container .flex.no-margins {
  // remove container margins
  padding-left: 0;
  padding-right: 0;
}

/**
 * .margins modifier for .container and .container.flex
 */
.container.margins,
.container .columns.margins,
.container .grid.margins,
.container .flex.margins {
  // reinstate container margins
  padding-left: var(--spacer);
  padding-right: var(--spacer);
}



/**
 * .container.column block
 *   relies upon .container
 */
.container.columns,
.container .columns {
  padding-left: calc(var(--spacer) / 2);
  padding-right: calc(var(--spacer) / 2);
  display: flex;
  flex-wrap: nowrap; // possibly unessecary

  /**
   * .column Element
   */
  .column {
    flex-grow: 1;
    margin-left: calc(var(--spacer) / 2);
    margin-right: calc(var(--spacer) / 2);

    // These ensure that the growth system works, by disregarding content and forcing size.
    flex-basis: 0;
    width: 0;


    /**
     * Modifiers
     */
    &.two    { flex-grow: 2; }
    &.three  { flex-grow: 3; }
    &.four   { flex-grow: 4; }
    &.five   { flex-grow: 5; }
    &.six    { flex-grow: 6; }
    &.seven  { flex-grow: 7; }
    &.eight  { flex-grow: 8; }
    &.nine   { flex-grow: 9; }
    &.ten    { flex-grow: 10; }
    &.eleven { flex-grow: 11; }
    // TODO: Add modifiers to allow growing or shrinking based on content.
  }
  /**
   * Modifier applied to .container that affects .column
   *
   * .break-*
   */
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);
    @media (max-width: $width - 1) {
      &.break-#{$label} {
        flex-wrap: wrap;
        .column {
          width: calc(100% - var(--spacer));
          flex-basis: auto;
        }
      }
    }
  }

}


/**
 * .container.grid block
 *   relies upon .container
 */
.container.grid,
.container .grid {
  padding-left: calc(var(--spacer) / 2);
  padding-right: calc(var(--spacer) / 2);
  display: flex;
  flex-wrap: wrap;

  /**
   * .cell element
   */
  .cell {
    margin-left: calc(var(--spacer) / 2);
    margin-right: calc(var(--spacer) / 2);
    margin-bottom: var(--spacer); // warning: this causes unfixed bugs for .no-gaps and .spacing-*-* classes
    width: 100%;
  }
  /**
   * Modifier applied to .container that affects .box (indirectly)
   *
   * .column-*-*
   */
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);
    @media (min-width: $width) {
      @for $i from 2 through 6 { // $i is number of columns.
        &.columns-#{$label}-#{$i} .cell {
          width: calc((100% / #{$i}) - var(--spacer));
        }
      }
    }
  }

}


/**
 * .container.flex block
 *   relies upon .container
 */
.container.flex,
.container .flex {
  padding-left: calc(var(--spacer) / 2);
  padding-right: calc(var(--spacer) / 2);
  display: flex;

  /**
   * .box element
   */
  .box {
    margin-left: calc(var(--spacer) / 2);
    margin-right: calc(var(--spacer) / 2);
  }

  .box.grow {
    flex-grow: 1;
  }

  .box.align-center { align-self: center; }
  .box.align-top { align-self: flex-start; }
  .box.align-bottom { align-self: flex-end; }

}


/**
 * .no-gaps modifier for .container.columns and .container.grid
 *   affects .column and .cell
 *   also automatically applied to .inner-borders
 */
.container.columns.no-gaps,
.container.grid.no-gaps,
.container.grid.inner-borders {

  // reinstate full margins, if they are supposed to be there
  &:not(.no-margin) {
    padding-left: var(--spacer);
    padding-right: var(--spacer);
  }

  // remove column and box gaps
  .column, .cell {
    margin-left: 0;
    margin-right: 0;
  }

  // recalculate box widths
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);

    @media (min-width: $width) {
      @for $i from 2 through 6 { // $i is number of columns.
        &.columns-#{$label}-#{$i} .cell {
          width: calc((100% / #{$i}));
        }
      }
    }

  }
}

/**
 * .gaps modifier for .container.columns, .container.grid, and .container.flex
 *   affects .column, .cell, and .box
 */
.container.columns.gaps,
.container.grid.gaps,
.container.flex.gaps {

  // reinstate column and box gaps
  .column, .cell, .box {
    margin-left: 0;
    margin-right: 0;
  }

  // recalculate box widths
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);
    @media (min-width: $width) {
      @for $i from 2 through 6 { // $i is number of columns.
        &.columns-#{$label}-#{$i} .cell {
          width: calc((100% / #{$i}) - var(--spacer));
        }
      }
    }
  }

}


/**
 * .inset modifier for .container.grid
 *   affects .cell
 */
.container.grid.inset,
.container.grid.inner-borders {
  .cell {
    padding: var(--spacer);
  }
}

/**
 * .no-inset modifier for .container.grid
 *   affects .cell
 */
.container.grid.no-inset {
  .cell {
    padding: 0;
  }
}

/**
 * .inner-borders modifier for .container.grid
 *   affects .cell
 */
.container.grid.inner-borders {

  $border-width: 1px;

  .cell {
    // borders are applied here and the subtracted after, to simplify the theme file
    border-color: $text-color;
    border-style: solid;
    border-width: 0; // overrides some weird 3px default in chrome
    border-top-width: $border-width;
  }

  &[class*=columns-] {
    .cell:first-child { border-top: 0; }
  }
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);

    @media (min-width: $width) {
      // horizontal lines
      &.columns-#{$label}-2,
      &.columns-#{$label}-3,
      &.columns-#{$label}-4,
      &.columns-#{$label}-5,
      &.columns-#{$label}-6 {
        .cell:nth-child(2) { border-top: 0; }
      }
      &.columns-#{$label}-3,
      &.columns-#{$label}-4,
      &.columns-#{$label}-5,
      &.columns-#{$label}-6 {
        .cell:nth-child(3) { border-top: 0; }
      }
      &.columns-#{$label}-4,
      &.columns-#{$label}-5,
      &.columns-#{$label}-6 {
        .cell:nth-child(4) { border-top: 0; }
      }
      &.columns-#{$label}-5,
      &.columns-#{$label}-6 {
        .cell:nth-child(5) { border-top: 0; }
      }
      &.columns-#{$label}-6 {
        .cell:nth-child(6) { border-top: 0; }
      }
      // vertical lines
      &.columns-#{$label}-2 {
        .cell:nth-child(odd) { border-right-width: $border-width; }
        .cell:last-child { border-right-width: 0; }
      }
      &.columns-#{$label}-3 {
        .cell:nth-child(3n+1), .cell:nth-child(3n+2) { border-right-width: $border-width; } // resett
        .cell:nth-child(3n), .cell:last-child { border-right-width: 0; }
      }
      &.columns-#{$label}-4 {
        .cell:nth-child(4n+1), .cell:nth-child(4n+2), .cell:nth-child(4n+3) { border-right-width: $border-width; } // resett
        .cell:nth-child(4n), .cell:last-child { border-right-width: 0; }
      }
      &.columns-#{$label}-5 {
        .cell:nth-child(5n+1), .cell:nth-child(5n+2), .cell:nth-child(5n+3), .cell:nth-child(5n+4) { border-right-width: $border-width; } // resett
        .cell:nth-child(5n), .cell:last-child { border-right-width: 0; }
      }
      &.columns-#{$label}-6 {
        .cell:nth-child(6n+1), .cell:nth-child(6n+2), .cell:nth-child(6n+3), .cell:nth-child(6n+4), .cell:nth-child(6n+5) { border-right-width: $border-width; } // resett
        .cell:nth-child(6n), .cell:last-child { border-right-width: 0; }
      }
    }
  }
}



.column, .cell, .box {
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);
    @media (min-width: $width) {
      @for $i from 1 through 10 { // $i is number of columns.
        &.order-#{$label}-#{$i} {
          order: $i;
        }
      }
    }
  }
}
