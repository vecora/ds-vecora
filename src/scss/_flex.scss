/*
 * Block
 */
.container {
  margin-left: auto;
  margin-right: auto;
  padding-left: $gutter;
  padding-right: $gutter;

  /*
   * Modifier
   */
  .no-gutters {
    padding-left: 0;
    padding-right: 0;
    // Q: does this affect the boxes gutters as well???
  }

  /**
   * Modifiers
   *
   * max-width-*
   */
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);
    &.max-width-#{$label} { max-width: $width; }
  }
}


/*
 * Block
 * Dependancies: .container
 */
.container.flex, .column.flex {

  padding-left: $gutter / 2;
  padding-right: $gutter / 2;

  display: flex;
  flex-wrap: nowrap; // possibly unessecary

  /**
   * Element
   */
  .column {
    flex-grow: 1;
    margin-left: $gutter / 2;
    margin-right: $gutter / 2;

    // These ensure that the growth system works, by disregarding content and forcing size.
    flex-basis: 0;
    overflow: hidden;

    /**
     * Modifiers
     */
    &.two    { flex-grow: 2; }
    &.three  { flex-grow: 3; }
    &.four   { flex-grow: 4; }
    &.five   { flex-grow: 5; }
    &.six    { flex-grow: 6; }
    &.seven  { flex-grow: 7; }
    &.eight  { flex-grow: 8; }
    &.nine   { flex-grow: 9; }
    &.ten    { flex-grow: 10; }
    &.eleven { flex-grow: 11; }
    // TODO: Add modifiers to allow growing or shrinking based on content.
  }
  /**
   * Modifier applied to .container that affects .column
   *
   * .break-*
   */
  @each $label, $screen-resolution in $screen-resolutions {
    $width: map-get($screen-resolution, width);
    @media (max-width: $width - 1) {
      &.break-#{$label} {
        flex-wrap: wrap;
        .column {
          width: 100%;
          flex-basis: auto;
        }
      }
    }
  }

  // what is this for???
  /*
   * Modifier
   */
  &.center { justify-content: center; }


  /*
   * Element
   */
  .box {
    flex-grow: 1;
    margin-left: $gutter / 2;
    margin-right: $gutter / 2;
  }
  /**
   * Modifier applied to .container that affects .box (indirectly)
   *
   * .column-*-*
   */
  [class^=column-] {
    flex-wrap: wrap;
    .box {
      width: 100%;
    }
  }
  @each $label, $screen-resolution in $screen-resolutions {

    $width: map-get($screen-resolution, width);

    @media (min-width: $width) {
      @for $i from 2 through 6 { // $i is number of columns.
        &.columns-#{$label}-#{$i} .box {
          width: calc((100% / $i) - #{$gutter});
        }
      }
    }

  }

}
