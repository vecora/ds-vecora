input[type=button], input[type=submit], input[type=reset], button, a.button {
  display: inline-block;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;


  // add "hand" cursor to non-disabled .button elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }


  border: none;

/*
  $cap-height: 1.5 * $unit;

  padding-top: 2 * $unit - ($cap-height * 0.1);
  padding-bottom: 2 * $unit - ($cap-height * 0.3286);
  padding-left: 3.5 * $unit;
  padding-right: 3.5 * $unit;

  font-size: $cap-height * 1.4286;
  line-height: 1em;*/
  @include capitalized();
  font-weight: 500 !important;


  @include button(1.5, map-get($fonts, gilroy));

  color: var(--text-color);
  background-color: $light-gray;

  &.primary {
    color: white;
    background-color: var(--accent-color);
  }



  &.small {
    @include button(1, map-get($fonts, gilroy));
  }
  &.big {
    @include button(2, map-get($fonts, gilroy));
  }
  &.massive {
    @include button(2.5, map-get($fonts, gilroy));
  }

  &.fluid {
    display: block;
    width: 100%;
  }

}

// Future-proof disabling of clicks on `<a>` elements
a.button.disabled,
fieldset:disabled a.button {
  pointer-events: none;
}




.button.small.outline {
  border-width: 1px;
}



.button.outline {
  background: none !important;
  //padding-top: 9px;
  //padding-bottom: 8px;
  border: 2px solid currentColor;
  color: var(--text-color) !important;
  //transition: color 100ms, background-color 100ms;
  &:hover {
    background-color: var(--text-color) !important;
    border-color: var(--text-color);
    color: white !important;
  }

  &.negative {
    border-color: white;
    color: white !important;
    &:hover {
      background-color: white !important;
      color: $sg-text-color !important;
    }
  }
}
/*
.--on-color {
  .button.outline {
    border-color: white;
    color: white !important;
    &:hover {
      background-color: white !important;
      color: $sg-text-color !important;
    }
  }
}*/



/*
@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}
*/


//
// Link buttons
//

// Make a button look and behave like a link
.button.link {
  //color: $link-color;
  background: transparent !important;



  &:focus,
  &.focus {
    //text-decoration: $link-hover-decoration;
    border-color: transparent;
    box-shadow: none;
  }

  &:disabled,
  &.disabled {
    //color: $btn-link-disabled-color;
    pointer-events: none;
  }

  // No need for an active state here
}


//
// Button Sizes
//



//
// Block button
//

.btn-block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  + .btn-block {
    //margin-top: $btn-block-spacing-y;
  }
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}
