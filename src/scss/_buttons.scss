// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

@mixin button-colorize($colors) {
  $gradient-colors: nth($colors, 1);
  $bg-color: nth(nth($colors, 1), 2);
  $text-color: nth($colors, 2);
  background-image: linear-gradient(to right, $gradient-colors);
  background-color: $bg-color;
  &, & a { color: $text-color !important; } // WARNING: !important is set because bootstrap overrides without
}


.button {
  display: inline-block;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  //border: $btn-border-width solid transparent;
  // @include button-size($btn-padding-y, $btn-padding-x, $font-size-base, $btn-line-height, $btn-border-radius);
  // @include transition($btn-transition);

  // Share hover and focus styles
  @include hover-focus {
    text-decoration: none;
  }

  border-radius: 50px; // TODO: figure out the height and set this to half the height

  &:focus,
  &.focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    opacity: $btn-disabled-opacity;
    @include box-shadow(none);
  }

  // Opinionated: add "hand" cursor to non-disabled .btn elements
  &:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active {
    background-image: none;
    @include box-shadow($btn-active-box-shadow);

    &:focus {
      @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
    }
  }



  border: none;

  $cap-height: 3 * $unit;

  padding-top: 4 * $unit - ($cap-height * 0.1);
  padding-bottom: 4 * $unit - ($cap-height * 0.3286); 
  padding-left: 7 * $unit;
  padding-right: 7 * $unit;

  font-size: $cap-height * 1.4286;
  line-height: 1em;
  @include capitalized();

}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}


.button {
  @include button-colorize(map-get($button-colors, secondary));
}

@each $name, $colors in $button-colors {
  .button.#{$name} {
    @include button-colorize($colors);
  }
}


.button.small {
  padding: 8px 20px 7px 20px;
  font-size: 60% !important;
  font-weight: 600 !important;
}
.button.big {
  padding: 16px 40px 14px 40px;
  font-size: 120%;
}
.button.massive {
  padding: 24px 50px 22px 50px;
  font-size: 150%;
}

.button.fluid {
  display: block;
  width: 100%;
}


.button.outline {
  background: none !important;
  //padding-top: 9px;
  //padding-bottom: 8px;
  border: 2px solid $sg-text-color;
  color: $sg-text-color;
}



/*
@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}
*/


//
// Link buttons
//

// Make a button look and behave like a link
.button.link {
  font-weight: $font-weight-normal;
  color: $link-color;
  background: transparent !important;

  @include hover {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
    background-color: transparent;
    border-color: transparent;
  }

  &:focus,
  &.focus {
    text-decoration: $link-hover-decoration;
    border-color: transparent;
    box-shadow: none;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled-color;
    pointer-events: none;
  }

  // No need for an active state here
}


//
// Button Sizes
//

.btn-lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $font-size-lg, $btn-line-height-lg, $btn-border-radius-lg);
}

.btn-sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $font-size-sm, $btn-line-height-sm, $btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
  display: block;
  width: 100%;

  // Vertically space out multiple block buttons
  + .btn-block {
    margin-top: $btn-block-spacing-y;
  }
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}
